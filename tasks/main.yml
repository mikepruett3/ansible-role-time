---
# tasks file for ansible-role-time

- name: "Include OS-specific variables"
  ansible.builtin.include_vars: "{{ lookup('ansible.builtin.first_found', params) }}"
  vars:
    params:
      files:
        - '{{ansible_os_family}}_{{ansible_distribution_major_version}}.yaml'
        - '{{ansible_os_family}}.yaml'
        - '{{ansible_os_family}}.yaml'
      paths:
        - 'vars'

- name: "Gather the package facts"
  ansible.builtin.package_facts:
    manager: auto
  when: ansible_facts.packages is not defined

- name: "Set hosts TimeZone"
  community.general.timezone:
    name: "{{ timezone }}"

- name: "Remove NTP Daemon, if installed (RHEL7)"
  block:
    - name: "Stop NTP Service, if not already stopped"
      ansible.builtin.service:
        name: "ntpd"
        state: stopped
        enabled: no
    - name: "Uninstall the NTP Daemon, if installed"
      ansible.builtin.package:
        name: 'ntp'
        state: absent
  when:
    - "'ntp' in ansible_facts.packages"
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] >= '7'

- name: "Install required packages, if not already installed"
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  with_items: "{{ packages }}"
  when:
    - item|string not in ansible_facts.packages

- name: "Collect information of the NTP configuration file"
  ansible.builtin.slurp:
    src: "{{ ntp_config }}"
  register: contents

- name: "Set fact of the NTP configuration file contents"
  ansible.builtin.set_fact:
    configuration: "{{ contents['content'] | b64decode }}"
  when:
    - contents is defined

- name: "Disable existing server entries in NTP configuration file, if not already there"
  ansible.builtin.replace:
    path: "{{ ntp_config }}"
    regexp: '^(server.*)$'
    replace: '#\1'
  when:
    - configuration is defined
    - configuration is not ansible.builtin.search(item)
  with_items:
    - "{{ ntp_servers }}"

- name: "Disable existing pool entries in NTP configuration file, if not already there"
  ansible.builtin.replace:
    path: "{{ ntp_config }}"
    regexp: '^(pool.*)$'
    replace: '#\1'
  when:
    - configuration is defined
    - configuration is not ansible.builtin.search(item)
  with_items:
    - "{{ ntp_servers }}"

- name: "Insert desired server entires in NTP configuration file, if not already there"
  ansible.builtin.lineinfile:
    path: "{{ ntp_config }}"
    insertafter: '^(\#server.*)$'
    line: "server {{ item }} iburst"
    state: present
  when:
    - configuration is defined
    - configuration is not ansible.builtin.search(item)
  with_items:
    - "{{ ntp_servers }}"

- name: "Collect the NTP daemon runtime options"
  ansible.builtin.shell:
    cmd: grep ^OPTIONS '{{ ntp_daemon_config }}' | awk -F '=' '{print $2}' | tr -d '"'
  register: options
  failed_when: options.rc > 1
  changed_when: false
  when:
    - ansible_facts['distribution'] == 'RedHat'
    - ansible_facts['distribution_major_version'] >= '8'

- name: "Specify user account to run NTP daemon under"
  ansible.builtin.replace:
    path: "{{ ntp_daemon_config }}"
    regexp: '(?i)^(OPTIONS.*)'
    replace: 'OPTIONS="-u chrony {{ options.stdout }}"'
  when:
    - ansible_facts['distribution'] == 'RedHat'
    - ansible_facts['distribution_major_version'] >= '8'
    - options is defined
    - options.stdout is not ansible.builtin.search("chrony")

- name: "Get Permissions of NTP HomeDir"
  ansible.builtin.stat:
    path: "{{ ntp_homedir }}"
  register: result

- name: "Set Permissions on NTP HomeDir"
  ansible.builtin.file:
    path: "{{ ntp_homedir }}"
    mode: '0750'
    state: directory
    recurse: no
  when:
    - result is defined
    - result.stat.mode != "0750"

- name: "Stop NTP Service"
  ansible.builtin.service:
    name: "{{ ntp_daemon }}"
    state: stopped

- name: "Update current time from configured servers (RedHat - chrony)"
  #ansible.builtin.command: chronyd -q -t 1 'server {{ item }} maxsamples 1'
  ansible.builtin.command: chronyd -q -t 1 'server {{ item }} iburst'
  with_items: "{{ ntp_servers }}"
  register: ntpdate
  failed_when: ntpdate.rc != 1 and ntpdate.rc != 0
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] >= '7'

- name: "Update current time from configured servers (RedHat - ntpdate)"
  ansible.builtin.command: ntpdate -q '{{ item }}'
  with_items: "{{ ntp_servers }}"
  register: ntpdate
  failed_when: ntpdate.rc != 1 and ntpdate.rc != 0
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] <= '6'

- name: "Update current time from configured servers (Debian - chrony)"
  command: chronyd -q -t 1 'server {{ item }}'
  with_items: "{{ ntp_servers }}"
  register: ntpdate
  failed_when: ntpdate.rc != 1 and ntpdate.rc != 0
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: "Start NTP Service"
  ansible.builtin.service:
    name: "{{ ntp_daemon }}"
    state: started
